
export LD_LIBRARY_PATH=/usr/local/lib # fixes TA-Lib
export EDITOR=vim
export GOHOME=$HOME

# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
  *i*) ;;
  *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth:erasedups

# The space thing is default?
# export HISTIGNORE=$HISTIGNORE:"history*:exit:clear:ls*"
export HISTIGNORE=$HISTIGNORE:"history*:exit:clear"

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=10000
HISTFILESIZE=20000
export PROMT_COMMAND='history -a'

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
  debian_chroot=$(cat /etc/debian_chroot)
fi


# TODO this only needs to happen once
if [ -e "~/.xterm-256color-italic.terminfo" ]; then
    tic "~/.xterm-256color-italic.terminfo" && \
        rm "~/.xterm-256color-italic.terminfo"
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
  xterm-color) color_prompt=yes;;
  xterm-256color) export TERM=xterm-256color-italic;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

# if [ -n "$force_color_prompt" ]; then
#   if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
#     # We have color support; assume it's compliant with Ecma-48
#     # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
#     # a case would tend to support setf rather than setaf.)
#     color_prompt=yes
#   else
#     color_prompt=
#   fi
# fi

# # Project Helpers
# _has_project() {
#   dir=$1
#   if [ -e $dir/README.md ]; then return 0; fi
#   if [ -e $dir/.git ]; then return 0; fi
#   return 1;
# }

# _get_projects() {
#   for dir in `find ~/projects -mindepth 1 -maxdepth 1 -type d`; do
#     if _has_project $dir; then
#       echo $dir
#     else
#       for subdir in `find $dir -mindepth 1 -maxdepth 1 -type d`; do
#         if _has_project $subdir; then
#           echo $subdir
#         fi
#       done
#     fi
#   done
# }

# Allow quickly switch to project directories
_p_complete() {
  local cur=${COMP_WORDS[COMP_CWORD]}
  #COMPREPLY=( $(compgen -W "$(_get_projects | sed -re 's:/home/optroot/projects/::gi')" -- $cur) )
  COMPREPLY=( $(compgen -W "$(project -l)" -- $cur) )
}

# _goto_project() {
#   # if [ "$#" -ne 1 ]; then
#   #   #echo "$0"
#   #   #>&2 echo "Usage: ${0##*/} [project]"
#   #   >&2 echo "Usage: p [project]"
#   #   # TODO no reliable way to get script name
#   #   #exit 1
#   #   return 1
#   # fi
#   cd ~/projects/$1
# }

#alias p='_goto_project'
alias p=' . project -z'
complete -F _p_complete p

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
  test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
  alias ls='ls -h --color=auto'
  alias dir='dir --color=auto'
  alias vdir='vdir --color=auto'
  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
fi

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

# if [ -f ~/.bash_aliases ]; then
#   . ~/.bash_aliases
# fi

# typos
alias :e='vim'
alias :wq=''
alias :q=''

# ls
alias sl='ls -CF'

# other
alias project='. project'
alias p='. p'
alias ack='ack-grep'

# fixes
alias tmux='tmux -u2'
alias vi='vim'

# convenience fix when is scan mode
alias thon='python'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

REDFG="\[\e[38;5;124m\]"
REDBG="\[\e[48;5;124m\]"
BLUEFG="\[\e[38;5;24m\]"
BLUEBG="\[\e[48;5;24m\]"
DEEPBLUEFG="\[\e[38;5;18m\]"
DEEPBLUEBG="\[\e[48;5;18m\]"
GREENFG="\[\e[38;5;64m\]"
GREENBG="\[\e[48;5;64m\]"
WHITEFG="\[\e[38;5;7m\]"
WHITEBG="\[\e[48;5;7m\]"
BLACKFG="\[\e[38;5;16m\]"
BLACKBG="\[\e[48;5;16m\]"
BOLD="\[\e[1m\]"
CLEAR="\[\e[0m\]"

export PROMPT_COMMAND=__prompt_command
__prompt_command() {
  local EXIT="$?"
  PS1=""

  if branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null); then
    if [[ "$branch" == "master" ]]; then
      PS1+="${DEEPBLUEBG}${WHITEFG}${BOLD}${BLUEBG}${DEEPBLUEFG} "
    else
      PS1+="${DEEPBLUEBG}${WHITEFG}${BOLD} ${branch} ${BLUEBG}${DEEPBLUEFG} "
    fi
  fi

  if [ $EXIT != 0 ]; then
    PS1+="${BLUEBG}${WHITEFG}${BOLD}\$${BLUEFG}${REDBG}${CLEAR}${REDFG}${CLEAR} "
  else
    PS1+="${BLUEBG}${WHITEFG}${BOLD}\$${BLUEFG}${GREENBG}${CLEAR}${GREENFG}${CLEAR} "
  fi

  local tmuxtitle=`tmux display-message -p '#W' 2> /dev/null`
  if [[ $? -eq 0 ]]; then
    if [[ "$tmuxtitle" =~ ^[A-Z] ]]; then
      true # Don't touch the title
    elif [[ -z "$tmuxtitle" ]]; then
      true # tmux probably not running
    else
      V=${PWD##*projects/}
      V=${V%%/*}
      V=${V:-"bash"}
      tmux rename-window "$V" > /dev/null 2>&1
    fi
  fi

  case "$TERM" in
    xterm*|rxvt*|screen*)
      PS1="\[\e]0;\u@\h: ${PWD}\a\]$PS1"
      #PS1="${CLEAR}\u@\h: ${PWD}\a\]$PS1"
      ;;
    *)
      ;;
  esac

  history -a
  history -n
}

# Turn of C-s/C-Q unlock
stty stop ''
stty start ''
stty -ixon
stty -ixoff

# start tmux at login
#tmux attach &> /dev/null
#if [[ ! $TERM =~ screen ]]; then
#exec tmux -u2
#fi

# Use vim for man pages
export MANPAGER="/bin/sh -c \"col -b | vim -c 'set ft=man ts=8 nomod nolist nonu noma' -\""

# Load NVM
export NVM_DIR="/home/optroot/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"


