
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

Plug 'airblade/vim-gitgutter'
Plug 'Chiel92/vim-autoformat'
Plug 'coot/CRDispatcher'
Plug 'coot/EnchantedVim'
Plug 'editorconfig/editorconfig-vim'
Plug 'justinmk/vim-sneak'
Plug 'kien/rainbow_parentheses.vim'
Plug 'ludovicchabant/vim-gutentags'
Plug 'mattn/emmet-vim'
Plug 'michaeljsmith/vim-indent-object'
Plug 'morhetz/gruvbox'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'scrooloose/nerdtree'
Plug 'SirVer/ultisnips'
Plug 'tommcdo/vim-exchange'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'
"Plug 'tpope/vim-tbone'
Plug 'https://github.com/tpope/vim-tbone'
Plug 'tpope/vim-unimpaired'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'wellle/targets.vim'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'groenewege/vim-less'

call plug#end()

"TODO groups?
"TODO if plugin loaded
"TODO no rainbow in text(ish) files
"TODO tab only at start of line (togglable)
"TODO don't use enchanted?

" Editing
set nocompatible
set smartindent cindent
set tabstop=4 softtabstop=4 shiftwidth=4 expandtab
set noerrorbells visualbell
set number
set report=1
set ignorecase
set showcmd
set noshowmatch
set virtualedit=all
set scrolloff=8
set hidden
set showmode
"set modeline
"set mouse=
set noshowmatch
set pastetoggle=<F2>
set noswapfile
""set laststatus=2
"set formatoptions+=j
set cpoptions+=$
set nostartofline
set encoding=utf8
"set timeoutlen=1000 ttimeoutlen=0

autocmd FileType js,html  set tabstop=2 softtabstop=2 shiftwidth=2 expandtab
autocmd FileType Makefile set tabstop=4 softtabstop=4 shiftwidth=4 noexpandtab

" Wild menu
set wildignore+=*/.git/*,*/.svn/*,*.o,*.pyc,*~,*.so,*.swp,*.zip,*.tar,*.tar.gz,
set wildmode=full
set wildignorecase

" TODO no unicode?
set listchars=tab:â–¸\ ,eol:\ ,precedes:\ ,extends:\ ,trail:.

" Save folds and history
" TODO check if ~/.vim/view is made automatically
set undofile
silent! execute '!mkdir -p ~/.vim/undo'
set undodir=~/.vim/undo
"set viewdir=~/.vim/view
autocmd BufWinLeave *.* mkview!
autocmd BufWinEnter *.* silent! loadview

" Turn off automatic line commenting
autocmd FileType * silent! setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Tcomment insert mode trigger
let g:tcommentMaps = 1
let g:tcommentMapLeader1 = ''
let g:tcommentMapLeader2 = ''
let g:tcommentMapLeaderOp1 = 'gc'
let g:tcommentMapLeaderUncommentAnyway = 'g<'
let g:tcommentMapLeaderCommentAnyway = 'g>'
let g:tcommentTextObjectInlineComment = 'ic'

" Title
function! SetTmuxTitle(...)
    let t=system("tmux display-message -p '#W'")
    if strlen(matchstr(t[0], '\v[A-Z]'))>0
        return
    end

    let project=matchstr(expand("%:p:h"), 'projects/\(\w\+\)')
    if project != ''
        call system("tmux rename-window ".project[9:])
    else
        if a:0 > 0
            call system("tmux rename-window ".a:1)
        else
            call system("tmux rename-window "."vim")
        endif
    endif
endfunction

set title
let &titlestring = expand("%:p")
autocmd BufCreate,BufRead,BufLeave,BufEnter  *.* let &titlestring = expand("%:p")

augroup TmuxTitle
    autocmd!
    autocmd BufEnter  *.* call SetTmuxTitle()
    autocmd VimEnter  *.* call SetTmuxTitle()
    autocmd VimLeave  *.* call SetTmuxTitle("bash")
augroup END

"autocmd VimEnter * silent! execute 'try | Tmux rename-window vim | endtry'
"autocmd VimLeave * silent! execute 'try | Tmux rename-window bash | endtry'


" Color Settings
" TODO Tabline background
" TODO confimation on split window save/open
"syn on
set t_Co=256
let g:gruvbox_contrast_dark='hard'
let g:gruvbox_sign_column='bg0'
let g:gruvbox_invert_selection=0
colorscheme gruvbox
set background=dark

" Airline
autocmd VimEnter * :AirlineTheme base16
let g:airline_powerline_fonts=1
let g:airline#extensions#gutentags#enabled=1
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#unite#enabled=1
let g:airline#extensions#fugitive#enabled=1

" Snippets
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsEditSplit="horizontal"
let g:user_emmet_mode='iv'
imap <silent> <expr> <C-@> emmet#expandAbbrIntelligent("\<C-@>")
vmap <silent> <C-@> :call emmet#expandAbbr(0,'')

" NERDTree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | wincmd l | endif
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Enchanted
let g:VeryMagicSubstitute=1
let g:VeryMagicGlobal=1

" Indent guides
autocmd VimEnter * silent! IndentGuidesToggle
let g:indent_guides_guide_size=1
let g:indent_guides_start_level=2
let g:indent_guides_auto_colors=0

" Gutentags
let g:gutentags_enabled=0
let g:gutentags_tagfile='.tags'
let g:gutentags_project_root=['.git']
autocmd FileType c,php,java,python let g:gutentags_enabled=1

" Formatting
let g:autoformat_autoindent = 1
let g:autoformat_retab = 1
let g:autoformat_remove_trailing_spaces = 1
let g:formatdef_astyle_c='"astyle --mode=c -A2ps4CSKNwpUjCk3fH"'
let g:formatters_c=['astyle_c']
"let g:formatdef_tidy_html='"tidy -config ~/.tidy.conf 2> /dev/null"'
let g:formatdef_tidy_html='"tidy -config ~/.tidy.conf"'
let g:formatters_html=['tidy_html']
let g:autoformat_verbosemode=1

" Git
let g:gitgutter_max_signs=999
nnoremap cog :GitGutterToggle<CR>
autocmd VimEnter * silent! GitGutterDisable

" RainbowParentheses
autocmd VimEnter * silent! RainbowParenthesesToggle
autocmd Syntax   * silent! RainbowParenthesesLoadRound
autocmd Syntax   * silent! RainbowParenthesesLoadSquare
autocmd Syntax   * silent! RainbowParenthesesLoadBraces

" Syntax languages
autocmd BufRead,BufNewFile *.inc  silent! setlocal filetype=php
autocmd BufRead,BufNewFile *.tex  silent! setlocal filetype=tex
autocmd BufRead,BufNewFile *.md   silent! setlocal filetype=markdown

"au BufReadPost *.doc,*.docx,*.rtf,*.odp,*.odt,*.pdf silent set ro
"au BufReadPost *.doc,*.docx,*.rtf,*.odp,*.odt silent %!pandoc "%" -tplain -o /dev/stdout
"au BufReadPost *.pdf silent %!pdftotext -nopgbrk -layout -q -eol unix "%" - | fmt -w78

autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
autocmd WinLeave    * setlocal  nocursorline
autocmd VimEnter    * highlight CursorLine   ctermbg=235
autocmd InsertEnter * highlight CursorLine   ctermbg=234
autocmd InsertLeave * highlight CursorLine   ctermbg=235

" Leader Commands
let mapleader="\<SPACE>"
" TODO leader commands

" Open file shortcut
noremap  \\   :NERDTreeToggle<CR>
nnoremap \vi  :e $MYVIMRC<CR>
nnoremap \sh  :e ~/todo/bashtodo.md<CR>
nnoremap \to  :e ~/todo/vimtodo.md<CR>
nnoremap \id  :e ~/todo/ideas.md<CR>
nnoremap \wo  :e ~/todo/words.md<CR>
nnoremap \pa  :e ~/todo/pass.md<CR>
nnoremap \tm  :e ~/.tmux.conf<CR>
nnoremap \s   :UltiSnipsEdit<CR>

nnoremap <silent> <F1> :call TmuxSplitCmd('', 12)<CR>
nnoremap <silent> <F3> :silent! call TmuxSplitCmd('')<CR>
nnoremap <silent> <F4> :Autoformat<CR>
vnoremap <silent> <F6> :!python<CR>
nnoremap <silent> <F6> :.!python<CR>
nnoremap <silent> <F7> Y:@"<CR>
vnoremap <silent> <F7> Y:@"<CR>
"nnoremap <F8>
nnoremap <silent> <F9>  :call GetColors()<CR>
nnoremap <silent> <F10> :call SyntaxStack()<CR>

" Center the cursor
nnoremap n nzzzv
nnoremap N Nzzzv

nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

" Moving Visuals
nnoremap gV `[V`]
vmap <DOWN> xpgV
vmap <LEFT> <gV
vmap <RIGHT> >gV
vmap <UP> xkkpgV

nnoremap <UP> {
nnoremap <DOWN> }
nnoremap <LEFT> :bp<CR>
nnoremap <RIGHT> :bn<CR>

" Use vim-sneak for f
let g:sneak#use_ic_scs=1
"map? vmode?
"replace 'f' with 1-char Sneak
nmap f <Plug>Sneak_f
nmap F <Plug>Sneak_F
xmap f <Plug>Sneak_f
xmap F <Plug>Sneak_F
omap f <Plug>Sneak_f
omap F <Plug>Sneak_F
"replace 't' with 1-char Sneak
nmap t <Plug>Sneak_t
nmap T <Plug>Sneak_T
xmap t <Plug>Sneak_t
xmap T <Plug>Sneak_T
omap t <Plug>Sneak_t
omap T <Plug>Sneak_T

inoremap <C-F> <C-X><C-F>

" Navigation
augroup Navigation
    autocmd!
    autocmd VimEnter * silent! nnoremap <C-H> <C-W>h
    autocmd VimEnter * silent! nnoremap <C-K> <C-W>k
    autocmd VimEnter * silent! nnoremap <C-L> <C-W>l
    autocmd VimEnter * silent! nnoremap <silent> <C-J> :call MoveWindowOrTmux()<CR>
    autocmd VimEnter * silent! inoremap <C-H> <ESC><C-W>h
    autocmd VimEnter * silent! inoremap <C-K> <ESC><C-W>k
    autocmd VimEnter * silent! inoremap <C-L> <ESC><C-W>l
    autocmd VimEnter * silent! inoremap <silent> <C-J> <ESC>:call MoveWindowOrTmux()<CR>
augroup END

command! -bang -nargs=? -complete=file E e<bang> <args>
command! -bang -nargs=? -complete=file W w<bang> <args>
command! -bang -nargs=? -complete=file Q q<bang> <args>
command! -bang -nargs=? -complete=file Wq wq<bang> <args>
command! -bang -nargs=? -complete=file WQ wq<bang> <args>

" TODO try to send output to bottom first?
augroup Evaluate
    autocmd!
    autocmd FileType c      silent! nnoremap <silent> <buffer> <F5> :silent! call TmuxSplitCmd('gcc -Wall % && ./a.out')<CR>
    autocmd FileType html   silent! nnoremap <silent> <buffer> <F5> :silent! call TmuxSplitCmd('python -m SimpleHTTPServer 8000',4)<CR>
    autocmd FileType matlab silent! nnoremap <silent> <buffer> <F5> :silent! call TmuxSplitCmd('matlab -nosplash -nodesktop -r "run('%')"')<CR>
    autocmd FileType python silent! nnoremap <silent> <buffer> <F5> :silent! call TmuxSplitCmd('python %')<CR>
    autocmd FileType sh     silent! nnoremap <silent> <buffer> <F5> :silent! call TmuxSplitCmd('bash %')<CR>
    autocmd FileType vim    silent! nnoremap <silent> <buffer> <F5> :so %<CR>
augroup END

" Functions
" TODO WARNING only use with 1 bottom split
function! TmuxSplitCmd(cmd, ...)

    if a:0 == 1
        let l:lines=a:1
    else
        let l:lines='12'
    endif

    if a:cmd != ''
        let cmd=substitute(''.a:cmd.'', '%', shellescape(expand('%:p')), 'g')
        let cmd=substitute(cmd, ' ', '\\ ', 'g')
    else
        let cmd=""
    endif

    let npanes=len(split(system('tmux list-panes'), "\n"))
    if npanes == 1
        silent! execute 'Tmux new-window -dn vimshell -c '.shellescape(getcwd())
        silent! execute 'Tmux join-pane -dvl'.l:lines.' -s vimshell'
        execute 'sleep 200m'
    end

    silent! execute 'Tmux send-keys -t bottom '.cmd
    "silent! execute 'Tmux select-pane -D'
    " silent! execute 'Tmux break-pane -t bottom \; rename-window vimout \; select-window -l'
    " silent! execute 'Tmux new-window -dn vimshell -c '.shellescape(getcwd())
    " execute 'sleep 200m'
    " silent! execute 'Tmux send-keys -t vimshell '.l:s
    " silent! execute 'Tmux join-pane -dvl'.l:lines.' -s vimshell'
    " silent! execute 'Tmux select-pane -D'

endfunction

function! MoveWindowOrTmux()
    let n = winnr()
    wincmd j
    if winnr() == n
        silent! execute 'Tmux select-pane -D'
        return
    endif
endfunction

function! GetColors()
    let fg = "-1"
    let bg = "-1"
    for id in synstack(line("."), col("."))
        let bold = synIDattr(synIDtrans(id), "bold")
        let italic = synIDattr(synIDtrans(id), "italic")
        let fg = fg=="-1"? synIDattr(synIDtrans(id), "fg") : fg
        let bg = bg=="-1"? synIDattr(synIDtrans(id), "bg") : bg
    endfor
    let fg = fg=="-1"? synIDattr(hlID("Normal"),"fg") : fg
    let bg = bg=="-1"? synIDattr(hlID("Normal"),"bg") : bg
    let fg = fg=="-1"? "Terminal" : fg
    let bg = bg=="-1"? "Terminal" : bg
    echo "fg: [".fg."] bg: [".bg."]"
endfunction

function! SyntaxStack()
    let s = []
    for id in synstack(line("."), col("."))
        let real_name = synIDattr(id, "name")
        let syntax_name = synIDattr(synIDtrans(id), "name")
        if real_name == syntax_name
            call add(s,'['.real_name.']')
        else
            call add(s,'['.real_name.' as '.syntax_name.']')
        end
    endfor
    echo join(s, ' -> ')
endfunction

" Fix common programmer typos
iabbrev prinft    printf
iabbrev pritn     print
iabbrev retunr    return
iabbrev retrun    return
iabbrev reutrn    return
iabbrev improt    import

" ===================================================================== EXPERIMENTAL

" Learn to use Caps for ESC
" inoremap <ESC> <C-g>uESC

" TODO nremap more !
" If already in vimrc?
nnoremap !! :e $MYVIMRC<CR>Go<C-r>:<ESC>

" TODO tabularize-vim?
vnoremap <leader>a :!column -t -s $' '<CR>:'<,'>s/\v( *)  /\1 /g<CR>

" NOTE <C-_> == <C-/>
" TODO close all open parens in other languages
inoremap <C-_> </<C-X><C-O><ESC>a
"autocmd FileType html,xml inoremap <C-t> </<C-X><C-O><ESC>a
"autocmd FileType html,xml inoremap <buffer> </ </<C-X><C-O><ESC>a

"set mouse=a
"set selectmode=mouse,key

" Temp meteor helper
autocmd FileType javascript,html silent! nnoremap <silent> <buffer> <F5> :silent! call TmuxSplitCmd('meteor npm run lint --silent')<CR>


